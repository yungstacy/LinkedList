/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode firstHalfEndNode=middleNode(head);
        ListNode secondHalfFirstNode=reverseList(firstHalfEndNode);
        ListNode p1=head;
        ListNode p2=secondHalfFirstNode;
        while (p1!=null && p2!=null){
            if (p1.val!=p2.val){
                return false;
            }
        p1=p1.next;
        p2=p2.next;
        } 
        
    return true;

    }
   
    public ListNode middleNode(ListNode head){
     ListNode slow=head;
        ListNode fast=head;
        while (fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr=head;
        ListNode tmp=null;
      while (curr!=null){
        tmp = curr;
        curr=curr.next;
        tmp.next=prev;
        prev=tmp;
      }
return prev;
    }
}
